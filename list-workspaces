#!/bin/sh
# shellcheck disable=SC2016

# shellcheck source=./common-workspace
. "$(dirname "$0")/common-workspace"

usage() {
    cat <<END >&2
${0##*/} [options..] "

Options:
  -s   Sorted by attach/create date
  -h   Show usage
END
    exit 2
}

die() {
    fmt="${1:-ERROR}"
    shift
    # shellcheck disable=SC2059
    printf >&2 "$fmt" "$@"
    exit 1
}

case "$OSTYPE" in
    darwin*)
        mdate() { stat -f '%m' "$@"; }
        sort() { command sort -r "$@"; }
        ;;
    *)
        mdate() { stat -c '%m' "$@"; }
        sort() { command sort "$@"; }
        ;;
esac


sorted=0
while getopts sh opt; do
    case "$opt" in
        s)
            sorted=1
            ;;
        \? | h)
            usage
            ;;
    esac
done
shift $((OPTIND - 1))

if [ $# -ne 0 ]; then
    die "Invalid argument"
fi

if [ -n "$WORKSPACE_PROJECT_ROOT" ]; then
    if ! [ -e "$WORKSPACE_PROJECT_ROOT" ]; then
        die 'WORKSPACE_PROJECT_ROOT `%s` does not exist' "$WORKSPACE_PROJECT_ROOT"
    fi
else
    WORKSPACE_PROJECT_ROOT="$PWD"
fi

if [ -z "$WORKSPACE_PROJECT_PATTERN" ]; then
    die "WORKSPACE_PROJECT_PATTERN must be set to a shell wildcard matching project paths, relative to WORKSPACE_PROJECT_ROOT"
fi

TAB="$(printf '\t')"

cd "$WORKSPACE_PROJECT_ROOT" || die
# shellcheck disable=SC2086
for dir in $WORKSPACE_PROJECT_PATTERN; do
    if [ -e "$dir/.workspace" ]; then
        if [ $sorted -eq 1 ]; then
            printf '%s\t%s\n' "$(mdate "$dir/.workspace")" "$dir"
        else
            echo "$dir"
        fi
    fi
done \
    | if [ $sorted -eq 1 ]; then
        sort -t"$TAB" -k1 \
            | cut -d"$TAB" -f2
    else
        cat
    fi
